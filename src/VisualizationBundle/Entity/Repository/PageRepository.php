<?php

namespace VisualizationBundle\Entity\Repository;


use \Doctrine\ORM\EntityRepository;

/**
 * PageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PageRepository extends EntityRepository
{
    public function findMainPage()
    {
        return $this->getEntityManager()
            ->createQuery('SELECT p FROM VisualizationBundle:Page p')->setMaxResults(1)->getOneOrNullResult();
    }

    public function findHideShowElements($page_id)
    {
        $panelImage = $this->getEntityManager()
            ->createQuery('SELECT p.id as panel_id, \'panelimage\' as panel_type,  e.term as term, rcd.fixedValue as value' .
                ' FROM VisualizationBundle:EventHideShow e' .
                ' JOIN e.panelsImage p' .
                ' JOIN e.source r' .
                ' JOIN r.registerCurrentData rcd' .
                ' WHERE p.page = ' . $page_id)->getArrayResult();

        $panelVariable = $this->getEntityManager()
            ->createQuery('SELECT p.id as panel_id, \'panelvariable\' as panel_type,  e.term as term, rcd.fixedValue as value' .
                ' FROM VisualizationBundle:EventHideShow e' .
                ' JOIN e.panelsVariable p' .
                ' JOIN e.source r' .
                ' JOIN r.registerCurrentData rcd' .
                ' WHERE p.page = ' . $page_id)->getArrayResult();

        $panelText = $this->getEntityManager()
            ->createQuery('SELECT p.id as panel_id, \'paneltext\' as panel_type,  e.term as term, rcd.fixedValue as value' .
                ' FROM VisualizationBundle:EventHideShow e' .
                ' JOIN e.panelsText p' .
                ' JOIN e.source r' .
                ' JOIN r.registerCurrentData rcd' .
                ' WHERE p.page = ' . $page_id)->getArrayResult();


        $ret = [];
        $elements = array_merge($panelImage, $panelVariable, $panelText);

        foreach ($elements as $element) {
            $term = explode(" ", $element['term']);
            if ($this->my_operator((float)$element['value'], (float)$term[1], $term[0])) {
                unset($element['term']);
                unset($element['value']);
                array_push($ret, $element);
            };
        }

        return $ret;
    }

    private function my_operator($a, $b, $char)
    {
        switch ($char) {
            case '==':
                return $a == $b;
            case '>':
                return $a > $b;
            case '<':
                return $a < $b;
            case '<=':
                return $a <= $b;
            case '>=':
                return $a >= $b;
            case '!=':
                return $a != $b;
        }
    }
}
