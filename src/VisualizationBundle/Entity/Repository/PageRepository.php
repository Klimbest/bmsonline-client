<?php

namespace VisualizationBundle\Entity\Repository;


use \Doctrine\ORM\EntityRepository;

/**
 * PageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PageRepository extends EntityRepository
{
    public function findMainPage()
    {
        return $this->getEntityManager()
            ->createQuery('SELECT p FROM VisualizationBundle:Page p')->setMaxResults(1)->getOneOrNullResult();
    }

    public function findHideShowElements($page_id)
    {
        $panelImage = $this->getEntityManager()
            ->createQuery('SELECT p.id as panel_id, e.termSign as term_sign, e.termValue as term_value, e.panelImageSource as source, rcd.fixedValue as value' .
                ' FROM VisualizationBundle:EventChangeSource e' .
                ' JOIN e.panelImage p' .
                ' JOIN e.termSource r' .
                ' JOIN r.registerCurrentData rcd' .
                ' WHERE p.page = ' . $page_id)->getArrayResult();

        $ret = [];
//
//        foreach ($panelImage as $element) {
//            $term = explode(" ", $element['term']);
//            if ($this->my_operator((float)$element['value'], (float)$term[1], $term[0])) {
//                unset($element['term']);
//                unset($element['value']);
//                $element['show'] = true;
//            } else {
//                unset($element['term']);
//                unset($element['value']);
//                $element['show'] = false;
//            }
//            array_push($ret, $element);
//        }

        return $panelImage;
    }

    private function my_operator($a, $b, $char)
    {
        switch ($char) {
            case '==':
                return $a == $b;
            case '>':
                return $a > $b;
            case '<':
                return $a < $b;
            case '<=':
                return $a <= $b;
            case '>=':
                return $a >= $b;
            case '!=':
                return $a != $b;
        }
    }
}
